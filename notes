#!/bin/bash
#reference table for quicknotes similar to tldr but for specific function calls

#basic usage: notes [option] [argument]
#options listed below in -h case segment
#arguments are always strings (add quotes for more specific searches or when adding a space between filenames/greps)
#will cat the contents of matching file entry in neighboring ~/bin/reference dir

#cat
#https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial
#complete function

#first time run block:
first_run() {
	#generate initial conf file + default values for editing later (but will still work if
	#user cancels script at this point)
	touch ~/.notes.conf
	mkdir ~/my-notes
	echo "#!/bin/bash" >> ~/.notes.conf
	echo "#notes app default settings:" >> ~/.notes.conf
	echo "#changing the below values will modify the 'notes' command behavior" >> ~/.notes.conf
	echo "path=~/my-notes/ #where you will save notes for query (**include trailing /)" >> ~/.notes.conf
	echo "editor=vi #default editor for creating new notes with -n option" >> ~/.notes.conf
	echo "reader=cat #default, prints directly to terminal, can change to 'less'" >> ~/.notes.conf
	echo 'length="$(echo $path | wc -m)" #trims the start of the path so that -f only shares filenames' >> ~/.notes.conf

	#setting up ~/my-notes/example document with some general syntax help
	echo "" >> ~/my-notes/example
	echo "welcome to notes!" >> ~/my-notes/example
	echo "note's options are modifiable in the ~/notes.conf file" >> ~/my-notes/example
	echo "by default, notes opens with $CAT, but you can use 'LESS' or other text programs"  >> ~/my-notes/example
	echo ""  >> ~/my-notes/example
	echo "ways to get started with notes:"  >> ~/my-notes/example
	echo "you can create a new note with 'notes -n <note_name>" >> ~/my-notes/example
	echo "get information about notes with notes -h" >> ~/my-notes/example
	echo "query for note titles with 'notes -f <string*> (uses globbing)" >> ~/my-notes/example
	echo "and grep for strings inside your notes with 'notes -g <string>" >> ~/my-notes/example
	echo "feel free to check the wiki for more data, discussions." >> ~/my-notes/example
	echo "have fun with notes!" >> ~/my-notes/example
	echo "" >> ~/my-notes/example
	echo "to see how this works, try 'notes -g query'" >> ~/my-notes/example
	echo "also try 'notes -f ex'" >> ~/my-notes/example
	#echo "notes also supports tab completion and therefore you can type 'notes e<tab>'" >> ~/my-notes/example
	#echo "to suggest 'example'" >> ~/my-notes/example
	echo "" >> ~/my-notes/example
	echo "and finally, try notes -n 'my_note' (default: VIM), you can edit this" >> ~/my-notes/example
	echo "by opening ~/.notes.conf and change the 'editor=' to NANO or xdg-open" >> ~/my-notes/example
	echo "which should open in your default text program, takes commands as args" >> ~/my-notes/example
}

auto_complete() {
		#FILE COMPLETION BLOCK:
	#defines a longer string that can't be echoed easily
	complete1='complete -W "$(q=($mypath); '
	complete2="sed 's@\.md @ @g' "
	complete3='<<<${q[@]##*/})" notes'	

	# #would you like to enable tab completion?
	echo "would you like to enable tab completion? (recommended) (y/n)" 
	read option
	case $option in
		y|Y) echo "in a separate terminal window copy the following into your ~/.bashrc or whichever shell environment you're using:"
			echo ""
			echo "mypath=~/my-notes    # or wherever you store your notes - don't forget to update ~/.notes.conf if changing this variable"
			echo ""
			echo "${complete1}${complete2}${complete3}"
			echo ""
			echo "press return when ready to continue"
			read placeholder
			#echo "test reply - user selected y|Y"
			;;
		n|N) echo "no worries, you can always complete later - see README on how to append your bashrc with correct syntax"
			;;
		*) echo "non y/n answer recieved, defaulting to no change"
			;;
		esac
}


#checks to see if conf file exists, if it doesn't - assumes program has never been launched before, spins up defaults and
#sets up ~/my-notes folder for library + places an 'example' doc in the folder
FILENAME=~/.notes.conf

if [ ! -f "$FILENAME" ]; then
   first_run
   auto_complete
   echo "establishing default settings in ~/.notes.conf and creating default save directory in ~/my-notes"
   echo ""
   echo "try notes -h or 'notes example' for getting started"
fi

#definitions:
. ~/.notes.conf
package=notes

#basic run script
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "$package - your local library of quick notes"
      echo " "
      echo "notes are currently being saved in $path"
      echo "$package [options] [arguments]"
      echo "configuration settings managed in ~/.notes.conf"
      echo " "
      echo "options:"
      echo "-h, --help                show brief help"
      echo "-f, --find=FIND           search for a subject string"
      echo "-l, --list= LIST NOTES    list all note titles"
      echo "-g, --grep=GREP STRING    search for any display matches inside library"
      echo "-n, --new=NEW NOTE/edit   opens $editor in $path<note_name>"
      echo "-d, --delete              deletes note: notes -d <note_name> (will ask to confirm)"
      echo "-! use with -d to delete without asking: notes -d! <notename> (unrecoverable)" 
      echo " "
      echo "arguments: <string> (note title or greppable line entry)"
      echo "examples:"
      echo " "
      echo "$package examples"
      echo "$package -f ex --> the following notes match this string: example ..." 
      echo "$package -g welcome= --> welcome to notes!"
      echo "$package -n new_note --> runs $editor at ${path}new_note"
      echo ""
      echo "try the command: 'notes example'"
      echo ""
      exit 0
      ;;
    -f|--find)
      shift
      if test $# -gt 0; then
      	echo "the following notes match this string:"
      	echo " "
        find $path"$@"* | cut -c $length-
        echo " "
        echo "run 'notes <titlename> to view"
      else
        echo "no string specified to look for..."
        exit 1
      fi
      shift
      ;;
    -g|--grep)
      shift
      if test $# -gt 0; then
        cat $path* | grep "$@"
      else
        echo "no string supplied to grep"
        exit 1
      fi
      shift
      ;;
    -n|--new)
      shift
      if test $# -gt 0; then
      	$editor $path"$@"
      else
      	echo "need to specify a new/existing file name"
      fi
      shift
      ;;	
    -l|--list)
        ls $path
        break
      ;;
    -d|--delete) ## THIS BLOCK NEEDS WORK:
      shift
      if test $# -gt 0; then
        echo "delete '$@'? (y/n)"
        read answer
        case $1 in
          y|Y)
            #rm "$@"
            shift
            echo "deleted!"
            exit 1
            ;;
          n|N)
            shift
            echo "cancelled delete"
            exit 1
            ;;
        esac
      else
        echo "cancelled delete"
      fi
      ;;
    *)
	 if test $# -gt 0; then
	 	$reader $path"$@"
	 	break
	 else
	 	echo "try notes example or 'notes -h'"
	  break
	fi
      ;;
  esac
done
